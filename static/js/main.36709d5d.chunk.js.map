{"version":3,"sources":["types/organization.ts","hooks/useTypedSelector.ts","components/Repository.tsx","components/Input.tsx","components/Error.tsx","components/Loader.tsx","components/Pagination.tsx","App.tsx","store/organizationReducer.ts","store/organizationSaga.ts","store/index.ts","index.tsx"],"names":["OrganizationActionTypes","useTypedSelector","useSelector","getOrganization","page","organization","type","GET_ORGANIZATION","Repository","repository","Card","border","style","width","className","Header","href","html_url","target","rel","name","Body","Text","forks","watchers","stargazers_count","Input","setOrganization","callGetOrganization","onSubmit","InputGroup","FormControl","onChange","e","value","placeholder","Button","variant","id","ErrorComponent","error","Alert","Heading","Loader","Spinner","animation","PaginationRounded","size","current_page","setPage","Stack","spacing","Pagination","count","shape","App","dispatch","useDispatch","state","repositories","loading","total_pages","useState","useEffect","trim","event","preventDefault","GET_PAGES","getTotalPages","length","map","initialState","sagaGetTotalPages","sagaGetOrganization","rootSaga","GetOrganization","a","axios","get","params","org","per_page","data","GetTotalRepos","public_repos","action","call","pages","put","GET_TOTAL_PAGES","payload","Math","ceil","Number","FETCH_ORGANIZATION_ERROR","FETCH_ORGANIZATION","response","FETCH_ORGANIZATION_SUCCESS","takeEvery","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.36709d5d.chunk.js","sourcesContent":["export interface OrganizationState {\r\n    repositories: any[];\r\n    name: null | string;\r\n    page: number;\r\n    total_pages: number;\r\n    loading: boolean;\r\n    error: null | string;\r\n}\r\n\r\nexport enum OrganizationActionTypes {\r\n    FETCH_ORGANIZATION = \"FETCH_ORGANIZATION\",\r\n    FETCH_ORGANIZATION_SUCCESS = \"FETCH_ORGANIZATION_SUCCESS\",\r\n    FETCH_ORGANIZATION_ERROR = \"FETCH_ORGANIZATION_ERROR\",\r\n    GET_ORGANIZATION = \"GET_ORGANIZATION\",\r\n    GET_TOTAL_PAGES = \"GET_TOTAL_PAGES\",\r\n    GET_PAGES = \"GET_PAGES\"\r\n}\r\n\r\ninterface fetchOrganizationAction {\r\n    type: OrganizationActionTypes.FETCH_ORGANIZATION;\r\n}\r\n\r\ninterface fetchOrganizationSuccessAction {\r\n    type: OrganizationActionTypes.FETCH_ORGANIZATION_SUCCESS;\r\n    payload: any;\r\n}\r\n\r\ninterface fetchOrganizationErrorAction {\r\n    type: OrganizationActionTypes.FETCH_ORGANIZATION_ERROR;\r\n    payload: string;\r\n}\r\n\r\ninterface fetchTotalPagesAction {\r\n    type: OrganizationActionTypes.GET_TOTAL_PAGES;\r\n    payload: number;\r\n}\r\n\r\nexport function getOrganization({ page, organization }: any): any {\r\n    return {\r\n        type: OrganizationActionTypes.GET_ORGANIZATION,\r\n        organization,\r\n        page\r\n    }\r\n}\r\n\r\nexport function getTotalPages(organization: string): any {\r\n    return {\r\n        type: OrganizationActionTypes.GET_PAGES,\r\n        organization\r\n    }\r\n}\r\n\r\nexport type OrganizationAction = fetchOrganizationAction | fetchOrganizationSuccessAction | fetchOrganizationErrorAction | fetchTotalPagesAction","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from '../store';\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector","import React from 'react'\r\nimport { Card } from 'react-bootstrap';\r\n\r\ntype Props = any;\r\nexport const Repository: React.FC<Props> = ({repository}) => { \r\n    return (\r\n    <Card border=\"info\" style={{ width: '12rem' }} className=\"mb-2\">\r\n        <Card.Header><a href={repository.html_url} target=\"_blank\" rel=\"noreferrer\" >{repository.name}</a></Card.Header>\r\n        <Card.Body>\r\n          <Card.Text> Forks: {repository.forks} </Card.Text>\r\n          <Card.Text> Watchers: {repository.watchers} </Card.Text>\r\n          <Card.Text> Stars: {repository.stargazers_count} </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    )\r\n}","import React from 'react';\r\nimport { FormControl, InputGroup, Button } from 'react-bootstrap';\r\n\r\ntype Props = any;\r\nexport  const Input: React.FC<Props> = ({ setOrganization, callGetOrganization }) => {\r\n  return (\r\n    <form onSubmit={callGetOrganization}>\r\n      <InputGroup className=\"m-3\">\r\n        <FormControl\r\n          onChange={(e) => setOrganization(e.target.value)}\r\n          placeholder=\"Organization's name\"\r\n          aria-label=\"Organization's name\"\r\n          aria-describedby=\"basic-addon2\"\r\n        />\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"primary\" id=\"button-addon2\">\r\n          Search\r\n        </Button>\r\n      </InputGroup>\r\n    </form>\r\n  )\r\n}","import React from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\ntype Props = any;\r\nexport const ErrorComponent: React.FC<Props> = ({ error }) => {\r\n    return (\r\n        <Alert variant=\"info\">\r\n            <Alert.Heading>{error}</Alert.Heading>\r\n            <p>\r\n                Try to enter the name of a company you know.\r\n            </p>\r\n        </Alert>\r\n    )\r\n}","import React from 'react'\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nexport const Loader: React.FC = () => { \r\n    return (\r\n        <div className=\"loader\">\r\n            <Spinner animation=\"border\" variant=\"primary\" />\r\n            <Spinner animation=\"border\" variant=\"secondary\" />\r\n            <Spinner animation=\"border\" variant=\"success\" />\r\n            <Spinner animation=\"border\" variant=\"danger\" />\r\n            <Spinner animation=\"border\" variant=\"warning\" />\r\n        </div>\r\n    )\r\n}","import * as React from 'react';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nexport function PaginationRounded({size, current_page, setPage}:any) {\r\n  return (\r\n    <Stack spacing={2}>\r\n      <Pagination page={current_page} \r\n      onChange={(e, page) => setPage(page)} count={size} variant=\"outlined\" shape=\"rounded\" />\r\n    </Stack>\r\n  );\r\n}\r\n","import { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { useTypedSelector } from './hooks/useTypedSelector';\nimport { getOrganization, getTotalPages } from './types/organization';\nimport { Loader, PaginationRounded, ErrorComponent, Repository, Input } from './components';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const { repositories, loading, error, total_pages } = useTypedSelector(state => state);\n  const [organization, setOrganization] = useState<string>();\n  const [current_page, setPage] = useState<number>();\n\n  function callGetOrganization(event: Event) {\n    event.preventDefault();\n    if (!organization) return;\n    setOrganization(organization.trim());\n    setPage(1);\n    dispatch(getTotalPages(organization));\n    dispatch(getOrganization({ organization, page: current_page }));\n  }\n\n  useEffect(() => {\n    if (organization?.trim()) {\n      setOrganization(organization.trim())\n      dispatch(getOrganization({ organization, page: current_page }));\n    }\n  }, [current_page])\n\n  return (\n    <div className=\"container\">\n      <div>\n        <Input setOrganization={setOrganization} callGetOrganization={callGetOrganization} />\n      </div>\n      <div className=\"pagination\">\n        {total_pages !== 0 && <PaginationRounded current_page={current_page} setPage={setPage} size={total_pages} />}\n      </div>\n      <div className=\"repositories\">\n        {\n          loading ? <Loader /> :\n            error || repositories.length === 0 ? <ErrorComponent error={error} /> :\n              repositories.map((repository => <Repository key={repository.id} repository={repository} />))\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import { OrganizationAction, OrganizationActionTypes, OrganizationState } from \"../types/organization\";\r\n\r\nconst initialState: OrganizationState = {\r\n    repositories: [],\r\n    name: null,\r\n    page: 1,\r\n    total_pages: 0,\r\n    loading: false,\r\n    error: null\r\n}\r\n\r\nexport default function organizationReducer(state = initialState, action: OrganizationAction): OrganizationState {\r\n    switch (action.type) {\r\n        case OrganizationActionTypes.FETCH_ORGANIZATION:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case OrganizationActionTypes.FETCH_ORGANIZATION_SUCCESS:\r\n            return {\r\n                ...state,\r\n                repositories: action.payload.repositories,\r\n                loading: false,\r\n                error: null,\r\n            };\r\n        case OrganizationActionTypes.FETCH_ORGANIZATION_ERROR:\r\n            return {\r\n                ...initialState,\r\n                error: action.payload,\r\n            };\r\n        case OrganizationActionTypes.GET_TOTAL_PAGES:\r\n            return {\r\n                ...state,\r\n                total_pages: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import axios from 'axios';\r\nimport { takeEvery, call, put } from 'redux-saga/effects';\r\nimport { OrganizationActionTypes } from '../types/organization';\r\n\r\n\r\nasync function GetOrganization({ organization, page }: any) {\r\n    const { data } = await axios.get('https://api.github.com/orgs/{org}/repos', { params: { org: organization, per_page: 15, page } })\r\n    return data;\r\n}\r\n\r\nasync function GetTotalRepos(org: any) {\r\n    const { data } = await axios.get('https://api.github.com/orgs/' + org)\r\n    return data.public_repos;\r\n}\r\n\r\nfunction* sagaGetTotalPages(action: any) {\r\n    try {\r\n        const pages: Promise<any> = yield call(GetTotalRepos, action.organization);\r\n        yield put({ type: OrganizationActionTypes.GET_TOTAL_PAGES, payload: Math.ceil(Number(pages) / 15) });\r\n    } catch {\r\n        yield put({ type: OrganizationActionTypes.FETCH_ORGANIZATION_ERROR, payload: \"No relevent organization!\" });\r\n    }\r\n}\r\n\r\nfunction* sagaGetOrganization(action: any) {\r\n    try {\r\n        yield put({ type: OrganizationActionTypes.FETCH_ORGANIZATION })\r\n        const response: Promise<any> = yield call(GetOrganization, action);\r\n        yield put({\r\n            type: OrganizationActionTypes.FETCH_ORGANIZATION_SUCCESS,\r\n            payload: {\r\n                repositories: response,\r\n            }\r\n        })\r\n    } catch {\r\n        yield put({ type: OrganizationActionTypes.FETCH_ORGANIZATION_ERROR, payload: \"No relevent organization!\" });\r\n    }\r\n}\r\n\r\nexport function* rootSaga() {\r\n    yield takeEvery(OrganizationActionTypes.GET_ORGANIZATION, sagaGetOrganization);\r\n    yield takeEvery(OrganizationActionTypes.GET_PAGES, sagaGetTotalPages);\r\n}","import createSagaMiddleware from \"@redux-saga/core\";\r\nimport { applyMiddleware, createStore } from \"redux\";\r\n\r\nimport organizationReducer from \"./organizationReducer\";\r\nimport { rootSaga } from './organizationSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport const store = createStore(organizationReducer, applyMiddleware(sagaMiddleware));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport type RootState = ReturnType<typeof organizationReducer>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\n\nReactDOM.render(\n    <Provider store={store}>\n          <App />\n    </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}